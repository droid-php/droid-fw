<?php

namespace Droid\Plugin\Fw\Generator;

use Droid\Model\Feature\Firewall\FirewallInterface;
use Droid\Model\Feature\Firewall\Rule;

class UfwGenerator
{
    protected $firewall;

    public function __construct(FirewallInterface $firewall)
    {
        $this->firewall = $firewall;
    }

    public function generate($hostname)
    {
        $rules = $this->firewall->getRulesByHostname($hostname);
        if (empty($rules)) {
            return null;
        }

        $o = array('# Generated by Droid for host `' . $hostname . '` @ ' . date('d/M/Y H:i'));

        $o[] = 'ufw --force reset';

        foreach ($this->firewall->getPolicyByHostname($hostname) as $direction => $action) {
            $o[] = sprintf('ufw default %s %s', $action, $direction);
        }

        foreach ($rules as $rule) {
            $o = array_merge($o, $this->generateRule($rule));
        }

        $o[] = 'ufw --force enable';
        $o[] = '';

        return implode("\n", $o);
    }

    /**
     * Generate a ufw rule.
     *
     * The rules generated by this method use (some of) the full PF-style syntax:
     *
     * ufw allow|deny [in|out] [proto <protocol>] [from <address> [port <port>]]
     *                                            [to <address> [port <port>]]
     *
     * @see http://manpages.ubuntu.com/manpages/trusty/en/man8/ufw.8.html
     */
    public function generateRule(Rule $rule)
    {
        $addresses = $this->firewall->constructAddresses($rule->getAddress());
        $o = array();
        foreach ($addresses as $address) {
            $r = sprintf('ufw %s', $rule->getAction());
            if ($rule->getCustom()) {
                $r .= ' ' . $rule->getCustom();
            } else {
                if ($rule->getDirection() == 'outbound') {
                    $r .= ' out';
                }
                if ($rule->getProtocol()) {
                    $r .= sprintf(' proto %s', $rule->getProtocol());
                }
                if ($rule->getDirection() == 'outbound') {
                    $r .= sprintf(' from any to %s', $address);
                } else {
                    $r .= sprintf(' from %s to any', $address);
                }
                if ($rule->getPort()) {
                    $r .= sprintf(' port %d', $rule->getPort());
                }
            }
            $r .= ' ' . trim(sprintf('# [%s] %s', $rule->getAddress(), $rule->getComment()));
            $o[] = $r;
        }
        return $o;
    }
}
